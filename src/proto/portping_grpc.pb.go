// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: portping.proto

package portping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReacherClient is the client API for Reacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReacherClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Reacher_PingClient, error)
}

type reacherClient struct {
	cc grpc.ClientConnInterface
}

func NewReacherClient(cc grpc.ClientConnInterface) ReacherClient {
	return &reacherClient{cc}
}

func (c *reacherClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Reacher_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Reacher_ServiceDesc.Streams[0], "/portping.Reacher/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &reacherPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Reacher_PingClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type reacherPingClient struct {
	grpc.ClientStream
}

func (x *reacherPingClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReacherServer is the server API for Reacher service.
// All implementations must embed UnimplementedReacherServer
// for forward compatibility
type ReacherServer interface {
	Ping(*PingRequest, Reacher_PingServer) error
	mustEmbedUnimplementedReacherServer()
}

// UnimplementedReacherServer must be embedded to have forward compatible implementations.
type UnimplementedReacherServer struct {
}

func (UnimplementedReacherServer) Ping(*PingRequest, Reacher_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedReacherServer) mustEmbedUnimplementedReacherServer() {}

// UnsafeReacherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReacherServer will
// result in compilation errors.
type UnsafeReacherServer interface {
	mustEmbedUnimplementedReacherServer()
}

func RegisterReacherServer(s grpc.ServiceRegistrar, srv ReacherServer) {
	s.RegisterService(&Reacher_ServiceDesc, srv)
}

func _Reacher_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReacherServer).Ping(m, &reacherPingServer{stream})
}

type Reacher_PingServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type reacherPingServer struct {
	grpc.ServerStream
}

func (x *reacherPingServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Reacher_ServiceDesc is the grpc.ServiceDesc for Reacher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reacher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portping.Reacher",
	HandlerType: (*ReacherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Reacher_Ping_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "portping.proto",
}
